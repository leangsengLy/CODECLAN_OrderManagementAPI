// <auto-generated />
using System;
using LSOrderManagementAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LSOrderManagementAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250930231558_update")]
    partial class update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LSOrderManagementAPI.Model.LSCUSTOMER", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ADDRESS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CREATED_BY")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DB_CODE")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("EMAIL")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EN_NAME")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("GENDER")
                        .HasColumnType("bit");

                    b.Property<string>("NAME")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PHONE")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PHONE1")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UPDATED_BY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UPDATED_DATE")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("LSCUSTOMER", (string)null);
                });

            modelBuilder.Entity("LSOrderManagementAPI.Model.LSITEM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CREATED_BY")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CREATED_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("DB_CODE")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PRODUCT_NAME")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QTY")
                        .HasColumnType("int");

                    b.Property<decimal>("SUB_TOTAL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UNIT_PRICE")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UPDATED_BY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UPDATED_DATE")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("LSITEM", (string)null);
                });

            modelBuilder.Entity("LSOrderManagementAPI.Model.LSORDER", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CUS_ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DATE")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("LSORDER", (string)null);
                });

            modelBuilder.Entity("LSOrderManagementAPI.Model.LSORDER_ITEM", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ITEM_ID")
                        .HasColumnType("int");

                    b.Property<int>("ORDER_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("LSORDER_ITEM", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
